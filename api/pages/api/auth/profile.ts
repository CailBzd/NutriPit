// üìÇ pages/api/auth/profile.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { getUserById } from "../../../controllers/authController";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log("API : profile | M√©thode re√ßue :", req.method);

  // ‚úÖ G√©rer correctement les requ√™tes OPTIONS pour √©viter plusieurs appels
  if (req.method === "OPTIONS") {
    console.log("API : profile | Requ√™te OPTIONS intercept√©e");

    res.setHeader("Access-Control-Allow-Origin", process.env.NEXT_PUBLIC_ALLOWED_ORIGIN || "http://localhost:3000");
    res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
    res.setHeader("Access-Control-Allow-Credentials", "true");

    res.status(204).end(); // ‚úÖ R√©ponse vide avec `204 No Content` pour √©viter les erreurs
    return;
  }

  // ‚úÖ D√©finir les en-t√™tes CORS AVANT de renvoyer la r√©ponse
  res.setHeader("Access-Control-Allow-Origin", process.env.NEXT_PUBLIC_ALLOWED_ORIGIN || "http://localhost:3000");
  res.setHeader("Access-Control-Allow-Credentials", "true");

  try {
    console.log("API : profile | Cookies re√ßus :", req.cookies);

    const userId = req.cookies["user_id"];
    console.log("API : profile | ID utilisateur r√©cup√©r√© :", userId);

    if (!userId) {
      console.warn("API : profile | Aucun `user_id` trouv√© dans les cookies !");
      res.status(401).json({ error: "Utilisateur non authentifi√©." });
      return;
    }

    const userProfile = await getUserById(userId);
    console.log("API : profile | Utilisateur r√©cup√©r√© :", userProfile);

    res.status(200).json(userProfile);
  } catch (error: any) {
    console.error("API : profile | Erreur lors de la r√©cup√©ration du profil :", error.message);
    res.status(400).json({ error: error.message });
  }
}
